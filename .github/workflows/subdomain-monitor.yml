name: Subdomain Monitor (orgs → Discord)

permissions:
  contents: write
  id-token: write

on:
  schedule:
    - cron: "0 */6 * * *"   # Run every 6 hours
  workflow_dispatch:

jobs:
  monitor:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        org: [ "bitdefender", "telekom" ]

    env:
      HTTPX_PORTS: "80,443,8080,8000,8888,8443,9443"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Ensure directories exist
        run: |
          mkdir -p data/wildcards data/current data/previous data/new

      - name: Copy wildcard file
        run: cp data/wildcards/${{ matrix.org }}.txt wildcards.txt

      - name: Install OS dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip wget python3-pip jq

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Install Go and Python tools
        run: |
          export PATH=$PATH:$HOME/go/bin
          go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
          go install -v github.com/projectdiscovery/chaos-client/cmd/chaos@latest
          go install -v github.com/tomnomnom/anew@latest
          go install -v github.com/tomnomnom/assetfinder@latest
          pip3 install 'httpx[cli]' || true

      - name: Install Findomain
        run: |
          curl -L -o findomain.zip "https://github.com/findomain/findomain/releases/latest/download/findomain-linux-i386.zip"
          unzip -o findomain.zip
          chmod +x findomain
          sudo mv findomain /usr/local/bin/findomain
          rm -f findomain.zip

      - name: Install httpx (ProjectDiscovery)
        run: |
          echo "[*] Downloading latest httpx release..."
          URL=$(curl -s https://api.github.com/repos/projectdiscovery/httpx/releases/latest \
            | grep "browser_download_url.*linux_amd64.zip" \
            | cut -d '"' -f 4)
          wget -q "$URL" -O httpx_latest.zip
          unzip -o httpx_latest.zip
          chmod +x httpx
          sudo mv httpx /usr/local/bin/httpx-pd
          rm -f httpx_latest.zip LICENSE.md README.md 2>/dev/null || true

      - name: Export PDCP API Key
        run: |
          export PDCP_API_KEY=907560e1-54a0-452e-a6db-3c21fecc2288
          echo "PDCP_API_KEY exported"

      - name: Run subdomain enumeration pipeline
        id: enum
        run: |
          set -eux
          ORG=${{ matrix.org }}
          CUR_DIR="data/current/${ORG}"
          mkdir -p "$CUR_DIR"

          # Subfinder
          subfinder -silent -all -recursive -t 200 -dL wildcards.txt -o "$CUR_DIR/subfinder.txt" || true

          # Findomain
          findomain -quiet -f wildcards.txt -oL "$CUR_DIR/findomain.txt" || true

          # Assetfinder
          cat wildcards.txt | xargs -n1 -I {} bash -c "assetfinder --subs-only {} >> $CUR_DIR/assetfinder.txt || true"

          # Chaos
          chaos -dL wildcards.txt -silent -o "$CUR_DIR/chaos.txt" || true

          # SubEnum
          if [ ! -d "SubEnum" ]; then
            git clone https://github.com/bing0o/SubEnum.git
            cd SubEnum
            chmod +x setup.sh
            ./setup.sh
            cd ..
          fi
          ./SubEnum/subenum.sh -l wildcards.txt -u wayback,crt,abuseipdb,Amass -o "$CUR_DIR/subenum.txt" || true

          # Merge all results
          cat "$CUR_DIR"/*.txt 2>/dev/null | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' \
            | tr '[:upper:]' '[:lower:]' | sort -u > "$CUR_DIR/candidates.txt" || true

          # Telekom exclusion
          if [ "$ORG" = "telekom" ]; then
            grep -v -E "reverse\.open-telekom-cloud\.com$" "$CUR_DIR/candidates.txt" > "$CUR_DIR/tmp.txt" || true
            mv "$CUR_DIR/tmp.txt" "$CUR_DIR/candidates.txt"
          fi

          echo "CANDIDATES=$CUR_DIR/candidates.txt" >> $GITHUB_OUTPUT

      - name: Probe live subdomains
        id: probe
        run: |
          set -eux
          ORG=${{ matrix.org }}
          CUR="data/current/${ORG}/candidates.txt"
          LIVE="data/current/${ORG}/live.txt"
          touch "$LIVE"
          if [ -s "$CUR" ]; then
            cat "$CUR" | sed '/^\s*$/d' | httpx-pd -ports $HTTPX_PORTS -threads 200 -silent -o "$LIVE" || true
          fi
          echo "LIVE=$LIVE" >> $GITHUB_OUTPUT

      - name: Compare with previous results
        id: compare
        run: |
          set -eux
          ORG=${{ matrix.org }}
          PREV="data/previous/${ORG}.txt"
          CUR="data/current/${ORG}/live.txt"
          NEW_FILE="data/new/${ORG}-${GITHUB_RUN_ID}.txt"
          touch "$PREV"
          comm -13 <(sort "$PREV") <(sort "$CUR") > "$NEW_FILE" || true
          sed -i '/^\s*$/d' "$NEW_FILE" || true
          NEW_COUNT=$(wc -l < "$NEW_FILE" || echo 0)
          echo "NEW_FILE=$NEW_FILE" >> $GITHUB_OUTPUT
          echo "NEW_COUNT=$NEW_COUNT" >> $GITHUB_OUTPUT

      - name: Commit and update previous list
        if: steps.compare.outputs.NEW_COUNT != '' && steps.compare.outputs.NEW_COUNT != '0'
        run: |
          set -eux
          ORG=${{ matrix.org }}
          PREV="data/previous/${ORG}.txt"
          CUR="data/current/${ORG}/live.txt"
          git config user.name "subdomain-bot"
          git config user.email "bot@example.com"

          git pull --rebase origin main || true

          cp "$CUR" "$PREV"
          git add "$PREV" "data/new/${ORG}-${GITHUB_RUN_ID}.txt"
          git commit -m "Update ${ORG} live subdomains - run ${GITHUB_RUN_ID}" || true
          git push origin main || echo "Push failed; skipping update"

      - name: Post new subdomains to Discord
        if: steps.compare.outputs.NEW_COUNT != '' && steps.compare.outputs.NEW_COUNT != '0'
        run: |
          set -eux
          ORG=${{ matrix.org }}
          NEW_FILE="${{ steps.compare.outputs.NEW_FILE }}"
          COUNT=${{ steps.compare.outputs.NEW_COUNT }}
          if [ "$ORG" = "bitdefender" ]; then
            WEBHOOK="${{ secrets.DISCORD_WEBHOOK_BITDEFENDER }}"
          else
            WEBHOOK="${{ secrets.DISCORD_WEBHOOK_TELEKOM }}"
          fi

          ITEMS=$(head -n 15 "$NEW_FILE" | paste -s -d'\n' - | sed 's/"/\\"/g')
          DESCRIPTION="New live subdomains: ${COUNT}. Showing first 15. See repo for full list."

          EMBED=$(jq -n --arg title "New live subdomains — ${ORG} (${COUNT} new)" \
                --arg desc "$DESCRIPTION" \
                --arg items "$ITEMS" \
                '{
                  "embeds":[
                    {
                      "title":$title,
                      "description":$desc,
                      "fields":[ {"name":"New (first 15)","value":$items,"inline":false} ],
                      "footer":{"text":"GitHub Actions"}
                    }
                  ]
                }')

          sleep $(( (RANDOM % 3) + 1 ))
          curl -s -H "Content-Type: application/json" -d "$EMBED" "$WEBHOOK" || echo "Discord post failed"

      - name: Archive full list to Discord
        run: |
          set -eux
          ORG=${{ matrix.org }}
          WEBHOOK="${{ secrets.DISCORD_WEBHOOK_ARCHIVE }}"
          CUR="data/current/${ORG}/live.txt"
          COUNT=$(wc -l < "$CUR" || echo 0)
          DESC="Full list of live subdomains for ${ORG} (${COUNT} total)."
          EMBED=$(jq -n \
            --arg title "Archive — ${ORG} (${COUNT})" \
            --arg desc "$DESC" \
            '{
              "embeds":[
                {"title":$title,"description":$desc,"footer":{"text":"GitHub Actions"}}
              ]
            }')
          curl -s -H "Content-Type: application/json" -d "$EMBED" "$WEBHOOK" || true

      - name: Upload new subdomain file as artifact
        if: steps.compare.outputs.NEW_COUNT != '' && steps.compare.outputs.NEW_COUNT != '0'
        uses: actions/upload-artifact@v4
        with:
          name: new-${{ matrix.org }}-${{ github.run_id }}
          path: ${{ steps.compare.outputs.NEW_FILE }}

      - name: Done summary
        run: echo "Finished run for ${{ matrix.org }} (Run ID: $GITHUB_RUN_ID)"
